---
# file: ansible-role-prometheus/tasks/main.yaml

- block:
    - name: Check Docker installation
      command: docker --version
      register: docker
      changed_when: false
  rescue:
    - name: Install docker
      include_role:
        name: geerlingguy.docker
        apply:
          become: true

- name: Create Prometheus data directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0777
  with_items:
    - "{{ prometheus_data_dir }}"
    - "{{ prometheus_data_dir }}/rules"
    - "{{ prometheus_data_dir }}/certs"
  become: true

- block:
  - name: Check if reverse proxy continer is running
    shell: docker ps -q --filter "label={{ prometheus_reverse_proxy_container_label }}"
    register: reverse_proxy
    changed_when: false
    become: true

  - name: Apply reverse-proxy role
    include_role: 
      name: ansible-role-reverse-proxy
    when: reverse_proxy.stdout == ""

  - name: Configure reverse proxy
    template:
      src: prometheus.https.location.j2
      dest: "{{ prometheus_reverse_proxy_dir }}/conf.d/{{ role_name }}.https.location"
      owner: root
      mode: 0600
    notify: reverse_proxy_nginx_restart
    become: true

  - name: Install passlib
    apt:
      name: python-passlib
      state: present
    become: true
  
  - name: Create basic auth user
    htpasswd:
      path: "{{ prometheus_reverse_proxy_dir }}/conf.d/{{ role_name }}.htpasswd"
      name: "{{ vault_prometheus_proxy_user }}"
      password: "{{ vault_prometheus_proxy_password }}"
      owner: root
      group: www-data
      mode: 0644
    become: true
    notify: reverse_proxy_nginx_restart

  - name: Copy root ca
    block:
      - copy: 
          src: "/usr/local/share/ca-certificates/custom_root.crt"
          dest: "{{ prometheus_data_dir }}/certs/ca.crt"
          remote_src: true
    rescue:
      - copy:
         src: "/usr/local/share/ca-certificates/ipa-ca.crt"
         dest: "{{ prometheus_data_dir }}/certs/ca.crt"
         remote_src: true

- name: Delete old container
  shell: docker rm -f $(docker ps -a -q --filter "label={{ prometheus_container_label }}")
  register: docker_removed
  when: prometheus_docker_remove_container|bool
  failed_when:
    - docker_removed.rc != 0
    - '"requires at least 1 argument" not in docker_removed.stderr'
  become : true

- name: Create Prometheus docker container
  command: docker create \
            --name {{ prometheus_container_name }} \
            --label {{ prometheus_container_label }} \
            -v {{ prometheus_data_dir }}:/prometheus \
            --restart unless-stopped \
            --net host \
            prom/prometheus \
            --config.file=/prometheus/prometheus.yml \
            --web.listen-address={{ prometheus_listen_address }}
            --web.external-url={{ prometheus_external_url }} 
  register: docker_create
  failed_when:
    - docker_create.rc != 0
    - '"is already in use by container" not in docker_create.stderr'
  changed_when:
    - docker_create.rc == 0
  notify: "prometheus_container_restart"
  become: true
#            --web.route-prefix={{ prometheus_route_prefix }} \

- name: Generate prometheus config
  template:
    src: prometheus.j2
    dest: "{{ prometheus_data_dir }}/prometheus.yml"
    mode: 0644
    force: yes
    backup: yes
  register: prometheus_config
  notify: "prometheus_container_restart"
  become: true

- name: Copy default alerts
  copy:
    src: default.rules
    dest: "{{ prometheus_data_dir }}/rules/default.rules"
    mode: 0644
    force: yes
    backup: yes
  register: prometheus_rules
  notify: "prometheus_container_restart"
  become: true
